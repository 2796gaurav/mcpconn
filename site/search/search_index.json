{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to plug_mcp","text":"<p>plug_mcp is a Python library that provides a simple and efficient way to connect your applications to AI models using the Multi-purpose Cooperative Protocol (MCP). It acts as a wrapper around the <code>mcp</code> library, offering a streamlined client interface for seamless integration with various AI providers and transport protocols.</p> <p> </p>"},{"location":"#features","title":"\u2728 Features","text":"<ul> <li>Simplified Client Interface: A high-level <code>MCPClient</code> for easy interaction with MCP servers.</li> <li>Multi-provider Support: Out-of-the-box support for Anthropic and OpenAI models.</li> <li>Flexible Transports: Connect to servers using STDIO, SSE, or Streamable HTTP.</li> <li>Built-in Guardrails: Protect your application with content filtering, PII masking, and injection detection.</li> <li>Conversation Management: Easily manage conversation history, context, and persistence.</li> <li>Asynchronous by Design: Built with <code>asyncio</code> for high-performance, non-blocking I/O.</li> <li>Extensible: Easily add new LLM providers, transports, or guardrails.</li> </ul> <p>Ready to dive in? Check out the Getting Started guide. </p>"},{"location":"api-reference/","title":"API Reference","text":"<p>This page provides a reference for the <code>plug_mcp</code> library's public API.</p>"},{"location":"api-reference/#mcpclient","title":"<code>MCPClient</code>","text":"<p>The <code>MCPClient</code> is the main entry point for interacting with MCP servers.</p> <p>::: plug_mcp.client.MCPClient     options:       show_root_heading: true       show_source: false</p>"},{"location":"api-reference/#__init__","title":"<code>__init__</code>","text":"<p>Initializes the MCP client.</p> <p>Parameters:</p> <ul> <li><code>llm_provider</code> (str): The LLM provider to use. Currently supports <code>\"anthropic\"</code> and <code>\"openai\"</code>. Defaults to <code>\"anthropic\"</code>.</li> <li><code>env_file</code> (str, optional): Path to a <code>.env</code> file to load environment variables from.</li> <li><code>timeout</code> (float): Default timeout in seconds for operations. Defaults to <code>30.0</code>.</li> <li><code>conversation_id</code> (str, optional): An existing conversation ID to resume.</li> <li><code>auto_generate_ids</code> (bool): Whether to automatically generate a unique conversation ID for each message if one isn't active. Defaults to <code>True</code>.</li> <li><code>**llm_kwargs</code>: Additional keyword arguments to pass to the LLM provider's constructor.</li> </ul>"},{"location":"api-reference/#connect","title":"<code>connect</code>","text":"<p>Connects to an MCP server.</p> <p>Parameters:</p> <ul> <li><code>connection_string</code> (str): The connection string for the server (e.g., a URL for HTTP, or a command for STDIO).</li> <li><code>transport</code> (str, optional): The transport protocol to use (<code>\"stdio\"</code>, <code>\"sse\"</code>, <code>\"http\"</code>). If <code>None</code>, it's inferred from the connection string.</li> <li><code>headers</code> (dict, optional): A dictionary of headers to use for HTTP-based transports.</li> </ul>"},{"location":"api-reference/#query","title":"<code>query</code>","text":"<p>Sends a message to the AI and gets a response.</p> <p>Parameters:</p> <ul> <li><code>message</code> (str): The message to send.</li> <li><code>max_iterations</code> (int): The maximum number of tool-use iterations to perform. Defaults to <code>5</code>.</li> <li><code>conversation_id</code> (str, optional): The ID of the conversation to use for this query.</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: The AI's response.</li> </ul>"},{"location":"api-reference/#conversation-management","title":"Conversation Management","text":""},{"location":"api-reference/#start_conversation","title":"<code>start_conversation</code>","text":"<p>Starts a new conversation or resumes an existing one.</p> <p>Parameters:</p> <ul> <li><code>conversation_id</code> (str, optional): The ID of the conversation to start or resume. If <code>None</code>, a new one is generated.</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: The active conversation ID.</li> </ul>"},{"location":"api-reference/#get_conversation_history","title":"<code>get_conversation_history</code>","text":"<p>Retrieves the message history for the current conversation.</p> <p>Returns:</p> <ul> <li><code>list</code>: A list of message dictionaries.</li> </ul>"},{"location":"api-reference/#save_conversation-load_conversation","title":"<code>save_conversation</code> / <code>load_conversation</code>","text":"<p>Saves the current conversation state to a file or loads it from a file.</p> <p>Parameters:</p> <ul> <li><code>filepath</code> (str): The path to the file.</li> </ul>"},{"location":"api-reference/#guardrails","title":"Guardrails","text":""},{"location":"api-reference/#add_guardrail","title":"<code>add_guardrail</code>","text":"<p>Adds a guardrail to the client for content moderation.</p> <p>Parameters:</p> <ul> <li><code>guardrail</code>: An instance of a guardrail class (e.g., <code>WordMaskGuardrail</code>). </li> </ul>"},{"location":"code-of-conduct/","title":"Code of Conduct","text":""},{"location":"code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that are professional, respectful, and welcoming.</p>"},{"location":"code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code-of-conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at 2796gaurav@gmail.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code-of-conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code-of-conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code-of-conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interaction in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code-of-conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code-of-conduct/#enforcement-guidelines_1","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code-of-conduct/#1-correction_1","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code-of-conduct/#2-warning_1","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interaction in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code-of-conduct/#3-temporary-ban_1","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code-of-conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you get up and running with <code>plug_mcp</code>.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>To install <code>plug_mcp</code>, run the following command in your terminal:</p> <pre><code>pip install plug_mcp\n</code></pre> <p>This will install the core library and its dependencies.</p>"},{"location":"getting-started/#quick-start","title":"Quick Start","text":"<p>Here's a simple example of how to use <code>plug_mcp</code> to connect to an MCP server and interact with an AI model:</p> <pre><code>import asyncio\nfrom plug_mcp.client import MCPClient\n\nasync def main():\n    # Connect to a local server using STDIO\n    client = MCPClient(llm_provider=\"anthropic\")\n    await client.connect(\"python examples/simple_server/main.py\")\n\n    # Start a conversation\n    conversation_id = client.start_conversation()\n    print(f\"Started conversation: {conversation_id}\")\n\n    # Send a message and get a response\n    response = await client.query(\"Hello, world!\")\n    print(f\"AI: {response}\")\n\n    # Disconnect from the server\n    await client.disconnect()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>This example demonstrates the basic workflow:</p> <ol> <li>Import <code>MCPClient</code>: The main entry point for interacting with the library.</li> <li>Instantiate the client: Create an instance of <code>MCPClient</code>, specifying the desired LLM provider.</li> <li>Connect to a server: Use <code>await client.connect()</code> to establish a connection.</li> <li>Interact with the AI: Use methods like <code>start_conversation()</code> and <code>query()</code> to have a conversation.</li> <li>Disconnect: Cleanly close the connection with <code>await client.disconnect()</code>.</li> </ol> <p>For more detailed examples, please refer to the <code>examples</code> directory in the project repository. </p>"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2024 Gaurav Chauhan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"}]}